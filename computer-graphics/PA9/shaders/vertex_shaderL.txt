attribute vec4 v_position;
attribute vec2 v_texcoord;
attribute vec3 normal;


varying vec2 texcoord; 
varying vec4 colorV;  
     
uniform mat4 projectionMatrix; 
uniform mat4 viewMatrix; 
uniform mat4 modelMatrix; 


// light and material properties
uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct;


uniform vec4 LightPosition;
uniform float Shininess;

uniform float ball;

void main(void)
{

if (ball == 1.0){
  vec4 light = vec4(0,1,1,1)* (viewMatrix * modelMatrix);
  vec3 lightDir = light.xyz;
  
  vec4 color = gl_FrontMaterial.specular;
  vec4 color1 = gl_FrontMaterial.diffuse + vec4(2,2,2,1);
  vec4 color2 = gl_FrontMaterial.ambient + vec4(2,2,2,1);
  
  float cosAngIncidence = dot(normalize(normal), normalize(lightDir));
  cosAngIncidence = clamp(cosAngIncidence, 0, 1);
  colorV =  (color1+color2+color)*cosAngIncidence + vec4(0.1,0.1,0.1,1.0);
        
  texcoord = v_texcoord;

  gl_Position = (projectionMatrix * viewMatrix * modelMatrix) * v_position;

}
else{
    // Transform vertex  position into eye coordinates
    vec3 pos = ((viewMatrix * modelMatrix) * v_position).xyz;
	
    vec3 L = normalize( LightPosition.xyz - pos );
    vec3 E = normalize( -pos );
    vec3 H = normalize( L + E );

    // Transform vertex normal into eye coordinates
    vec3 N = normalize( (viewMatrix*modelMatrix) * vec4(normal, 0.0) ).xyz;

    // Compute terms in the illumination equation
    vec4 ambient = AmbientProduct;

    float Kd = max( dot(L, N), 0.0 );
    vec4  diffuse = Kd*DiffuseProduct;
    float Ks = pow( max(dot(N, H), 0.0), Shininess );
    vec4  specular = Ks * SpecularProduct;
    if( dot(L, N) < 0.0 )  specular = vec4(0.0, 0.0, 0.0, 1.0); 
    gl_Position = (projectionMatrix * viewMatrix * modelMatrix) * v_position;

    texcoord = v_texcoord;
    colorV = ambient + diffuse + specular;
    colorV.a = 1.0;
}
}


